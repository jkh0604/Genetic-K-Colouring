import random
import time
import numpy as np
import matplotlib.pyplot as plt
import networkx as nx
import tracemalloc

#Parameters
start_time = time.time()
pop_size = 50
generations = 100
mutation_rate = 0.05
k = 4

#Graphs
graph5 = {
    'A': ['B', 'C'], 
    'B': ['A', 'D'], 
    'C': ['A', 'D'], 
    'D': ['B', 'C']
}
graph7 = {
    'A': ['B', 'C'],
    'B': ['A', 'C', 'D'],
    'C': ['A', 'B', 'D', 'E'],
    'D': ['B', 'C', 'E', 'F'],
    'E': ['C', 'D', 'F'],
    'F': ['D', 'E']
}
graph25 = { 
    'A': ['B', 'C', 'D', 'E', 'F'],
    'B': ['A', 'C', 'D', 'G', 'H'],
    'C': ['A', 'B', 'D', 'I', 'J'],
    'D': ['A', 'B', 'C', 'K', 'L'],
    'E': ['A', 'F', 'G', 'I', 'K'],
    'F': ['A', 'E', 'H', 'J', 'L'],
    'G': ['B', 'E', 'H', 'I', 'L'],
    'H': ['B', 'F', 'G', 'J', 'K'],
    'I': ['C', 'E', 'G', 'J', 'K'],
    'J': ['C', 'F', 'H', 'I', 'L'],
    'K': ['D', 'E', 'H', 'I', 'J'],
    'L': ['D', 'F', 'G', 'J', 'K']
}

graph9 = {
    'A': ['B', 'C'],
    'B': ['A', 'C', 'D', 'E'],
    'C': ['A', 'B', 'E', 'F'],
    'D': ['B', 'E', 'G'],
    'E': ['B', 'C', 'D', 'F', 'G', 'H'],
    'F': ['C', 'E', 'H'],
    'G': ['D', 'E', 'H', 'I'],
    'H': ['E', 'F', 'G', 'I'],
    'I': ['G', 'H']
}

graph = {
    'A': ['B', 'D'],
    'B': ['A', 'C', 'E'],
    'C': ['B', 'E'],
    'D': ['A', 'E', 'G'],
    'E': ['D', 'H'],
    'F': ['C', 'I'],
    'G': ['D'],
    'H': ['E', 'I', 'J'],
    'I': ['F', 'H', 'K'],
    'J': ['H'],
    'K': ['I', 'L', 'M'],
    'L': ['K', 'N'],
    'M': ['K', 'N'],
    'N': ['L','M', 'O', 'P'],
    'O': ['N', 'Q'],
    'P': ['N', 'Q'],
    'Q': ['O', 'P', 'R', 'S'],
    'R': ['Q', 'T'],
    'S': ['Q'],
    'T': ['R', 'U', 'V'],
    'U': ['T', 'W'],
    'V': ['T', 'X'],
    'W': ['U', 'Y'],
    'X': ['V', 'Y'],
    'Y': ['X', 'W']
}

graph25 = {
    1: [2, 3, 4, 5],
    2: [1, 3, 6],
    3: [1, 2, 7, 8],
    4: [1, 9],
    5: [1, 10],
    6: [2, 11],
    7: [3, 12],
    8: [3, 13],
    9: [4, 14, 15],
    10: [5, 16],
    11: [6, 17, 18],
    12: [7, 19],
    13: [8, 20],
    14: [9, 21],
    15: [9, 22],
    16: [10, 23],
    17: [11, 24],
    18: [11, 25],
    19: [12, 20],
    20: [13, 19, 27],
    21: [14, 28],
    22: [15, 29],
    23: [16, 30],
    24: [17, 31],
    25: [18, 32],
    26: [27, 33],
    27: [20, 26, 28],
    28: [21, 27, 34],
    29: [22, 35],
    30: [23, 36],
    31: [24, 37],
    32: [25, 38],
    33: [26, 34, 39],
    34: [28, 33, 40],
    35: [29, 41],
    36: [30, 42],
    37: [31, 43],
    38: [32, 44],
    39: [33, 40, 45],
    40: [34, 39, 46],
    41: [35, 47],
    42: [36, 48],
    43: [37, 49],
    44: [38, 50],
    45: [39],
    46: [40],
    47: [41],
    48: [42],
    49: [43],
    50: [44]
}

graph100 = {
    1: [2, 3, 4],
    2: [1, 3, 5],
    3: [1, 2, 6, 7],
    4: [1, 8, 9],
    5: [2, 10, 11],
    6: [3, 12, 13],
    7: [3, 14, 15],
    8: [4, 16],
    9: [4, 17, 18],
    10: [5, 19],
    11: [5, 20],
    12: [6, 21],
    13: [6, 22, 23],
    14: [7, 24],
    15: [7, 25],
    16: [8, 26],
    17: [9, 27],
    18: [9, 28],
    19: [10, 29, 30],
    20: [11, 31, 32],
    21: [12, 33, 34],
    22: [13, 35],
    23: [13, 36, 37],
    24: [14, 38],
    25: [15, 39],
    26: [16, 40, 41],
    27: [17, 42],
    28: [18, 43],
    29: [19, 44, 45],
    30: [19, 46],
    31: [20, 47],
    32: [20, 48],
    33: [21, 49],
    34: [21, 50],
    35: [22, 51],
    36: [23, 52],
    37: [23, 53, 54],
    38: [24, 55],
    39: [25, 56],
    40: [26, 57, 58],
    41: [26, 59],
    42: [27, 60],
    43: [28, 61],
    44: [29, 62],
    45: [29, 63],
    46: [30, 64],
    47: [31, 65],
    48: [32, 66],
    49: [33, 67],
    50: [34, 68],
    51: [35, 69],
    52: [36, 70],
    53: [37, 71],
    54: [37, 72],
    55: [38, 73],
    56: [39, 74],
    57: [40, 75],
    58: [40, 76],
    59: [41, 77],
    60: [42, 78],
    61: [43, 79],
    62: [44, 80],
    63: [45, 81],
    64: [46, 82],
    65: [47, 83],
    66: [48, 84],
    67: [49, 85],
    68: [50, 86],
    69: [51, 70],
    70: [52, 87],
    71: [53, 88],
    72: [54, 89],
    73: [55, 90],
    74: [56, 91],
    75: [57, 92],
    76: [58, 93],
    77: [59, 94],
    78: [60, 95],
    79: [61, 96],
    80: [62, 97],
    81: [63, 98],
    82: [64, 99],
    83: [65, 100],
    84: [66],
    85: [67],
    86: [68],
    87: [70],
    88: [71],
    89: [72],
    90: [73],
    91: [74],
    92: [75],
    93: [76],
    94: [77],
    95: [78],
    96: [79],
    97: [80],
    98: [81],
    99: [82],
    100: [83]
}

graph2 = {
    1: [2, 3, 4, 5, 6, 7, 8, 9, 10],
    2: [1, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    3: [1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12],
    4: [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13],
    5: [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14],
    6: [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    7: [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16],
    8: [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17],
    9: [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18],
    10: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19],
    11: [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20],
    12: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21],
    13: [4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22],
    14: [5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23],
    15: [6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24],
    16: [7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25],
    17: [8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26],
    18: [9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27],
    19: [10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28],
    20: [11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29],
    21: [12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30],
    22: [13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31],
    23: [14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32],
    24: [15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33],
    25: [16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34],
    26: [17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35],
    27: [18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36],
    28: [19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37],
    29: [20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38],
    30: [21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40],
    31: [22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41],
    32: [23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42],
    33: [24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43],
    34: [25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
    35: [26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45],
    36: [27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46],
    37: [28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47],
    38: [29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48],
    39: [30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
    40: [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50],
    41: [32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50],
    42: [33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50],
    43: [34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50],
    44: [35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50],
    45: [36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50],
    46: [37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50],
    47: [38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50],
    48: [39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50],
    49: [40, 41, 42, 43, 44, 45, 46, 47, 48, 50],
    50: [41, 42, 43, 44, 45, 46, 47, 48, 49]
}

graph2 = {
    'A': ['B', 'D'],
    'B': ['A', 'C', 'E'],
    'C': ['B', 'E'],
    'D': ['A', 'E', 'G'],
    'E': ['D', 'H'],
    'F': ['C', 'I'],
    'G': ['D'],
    'H': ['E', 'I', 'J'],
    'I': ['F', 'H', 'K'],
    'J': ['H'],
    'K': ['I', 'L', 'M'],
    'L': ['K', 'N'],
    'M': ['K', 'N'],
    'N': ['L','M', 'O', 'P'],
    'O': ['N', 'Q'],
    'P': ['N', 'Q'],
    'Q': ['O', 'P', 'R', 'S'],
    'R': ['Q', 'T'],
    'S': ['Q'],
    'T': ['R', 'U', 'V'],
    'U': ['T', 'W'],
    'V': ['T', 'X'],
    'W': ['U', 'Y'],
    'X': ['V', 'Y'],
    'Y': ['X', 'W']
}

graph2 = {
    1: [8, 15, 22, 29, 36, 2, 3, 4, 5, 6, 7, 13, 19, 25, 31],
    2: [9, 16, 23, 30, 7, 3, 4, 5, 6, 8, 14, 20, 26, 32, 1],
    3: [10, 17, 24, 8, 13, 4, 5, 6, 9, 15, 21, 27, 33, 2, 1],
    4: [11, 18, 9, 14, 19, 5, 6, 10, 16, 22, 28, 34, 3, 2, 1],
    5: [12, 10, 15, 20, 25, 6, 11, 17, 23, 29, 35, 4, 3, 2, 1],
    6: [11, 16, 21, 26, 31, 12, 18, 24, 30, 36, 5, 4, 3, 2, 1],
    7: [14, 21, 28, 35, 8, 9, 10, 11, 12, 13, 19, 25, 31, 2, 1],
    8: [15, 22, 29, 36, 13, 9, 10, 11, 12, 14, 20, 26, 32, 7, 3, 2, 1],
    9: [16, 23, 30, 14, 19, 10, 11, 12, 15, 21, 27, 33, 8, 7, 4, 3, 2],
    10: [17, 24, 15, 20, 25, 11, 12, 16, 22, 28, 34, 9, 8, 7, 5, 4, 3],
    11: [18, 16, 21, 26, 31, 12, 17, 23, 29, 35, 10, 9, 8, 7, 6, 5, 4],
    12: [17, 22, 27, 32, 18, 24, 30, 36, 11, 10, 9, 8, 7, 6, 5],
    13: [20, 27, 34, 14, 15, 16, 17, 18, 19, 25, 31, 8, 7, 3, 1],
    14: [21, 28, 35, 19, 15, 16, 17, 18, 20, 26, 32, 13, 9, 8, 7, 4, 2],
    15: [22, 29, 36, 20, 25, 16, 17, 18, 21, 27, 33, 14, 13, 10, 9, 8, 5, 3, 1],
    16: [23, 30, 21, 26, 31, 17, 18, 22, 28, 34, 15, 14, 13, 11, 10, 9, 6, 4, 2],
    17: [24, 22, 27, 32, 18, 23, 29, 35, 16, 15, 14, 13, 12, 11, 10, 5, 3],
    18: [23, 28, 33, 24, 30, 36, 17, 16, 15, 14, 13, 12, 11, 6, 4],
    19: [26, 33, 20, 21, 22, 23, 24, 25, 31, 14, 13, 9, 7, 4, 1],
    20: [27, 34, 25, 21, 22, 23, 24, 26, 32, 19, 15, 14, 13, 10, 8, 5, 2],
    21: [28, 35, 26, 31, 22, 23, 24, 27, 33, 20, 19, 16, 15, 14, 11, 9, 7, 6, 3],
    22: [29, 36, 27, 32, 23, 24, 28, 34, 21, 20, 19, 17, 16, 15, 12, 10, 8, 4, 1],
    23: [30, 28, 33, 24, 29, 35, 22, 21, 20, 19, 18, 17, 16, 11, 9, 5, 2],
    24: [29, 34, 30, 36, 23, 22, 21, 20, 19, 18, 17, 12, 10, 6, 3],
    25: [32, 26, 27, 28, 29, 30, 31, 20, 19, 15, 13, 10, 7, 5, 1],
    26: [33, 31, 27, 28, 29, 30, 32, 25, 21, 20, 19, 16, 14, 11, 8, 6, 2],
    27: [34, 32, 28, 29, 30, 33, 26, 25, 22, 21, 20, 17, 15, 13, 12, 9, 3],
    28: [35, 33, 29, 30, 34, 27, 26, 25, 23, 22, 21, 18, 16, 14, 10, 7, 4],
    29: [36, 34, 30, 35, 28, 27, 26, 25, 24, 23, 22, 17, 15, 11, 8, 5, 1],
    30: [35, 36, 29, 28, 27, 26, 25, 24, 23, 18, 16, 12, 9, 6, 2],
    31: [32, 33, 34, 35, 36, 26, 25, 21, 19, 16, 13, 11, 7, 6, 1],
    32: [33, 34, 35, 36, 31, 27, 26, 25, 22, 20, 17, 14, 12, 8, 2],
    33: [34, 35, 36, 32, 31, 28, 27, 26, 23, 21, 19, 18, 15, 9, 3],
    34: [35, 36, 33, 32, 31, 29, 28, 27, 24, 22, 20, 16, 13, 10, 4],
    35: [36, 34, 33, 32, 31, 30, 29, 28, 23, 21, 17, 14, 11, 7, 5],
    36: [35, 34, 33, 32, 31, 30, 29, 24, 22, 18, 15, 12, 8, 6, 1]
}

population = []
for i in range(pop_size):
    individual = {}
    for vertex in graph:
        individual[vertex] = random.randint(1, k)
    population.append(individual)

#Required to track Memory Allocation
def app():
    lt = []
    for i in range(0, 100000):
        lt.append(i)

#Fitness (0 is a local optimum)
def fitness(individual):
    conflicts = 0
    for vertex in graph:
        color = individual[vertex]
        for neighbor in graph[vertex]:
            if individual[neighbor] == color:
                conflicts += 1
    return -conflicts

#Perform Tournament Selection 
def selection(population):
    tournament_size = 5
    tournament = random.sample(population, tournament_size)
    tournament.sort(key=lambda x: fitness(x))
    return tournament[-1]

#Perform k-Point Crossover
def crossover(parent1, parent2):
    k = 2
    crossover_points = sorted(random.sample(range(len(graph)), k))
    child = {}
    for i in range(len(graph)):
        if i < crossover_points[0]:
            child[list(graph.keys())[i]] = parent1[list(graph.keys())[i]]
        elif i < crossover_points[1]:
            child[list(graph.keys())[i]] = parent2[list(graph.keys())[i]]
        else:
            child[list(graph.keys())[i]] = parent1[list(graph.keys())[i]]
    return child

#Perform Mutation
def mutation(individual):
    vertex = random.choice(list(individual.keys()))
    individual[vertex] = random.randint(1, k)
    return individual

#Perform Elitist Selection
def elitism(population):
    population.sort(key=lambda x: fitness(x))
    return population[:int(0.1*pop_size)]


tracemalloc.start()

#Evolutionary algorithm
best_fitnesses = []
for iteration in range(generations):
    parents = [selection(population) for i in range(pop_size)]
    offspring = [crossover(parents[i], parents[i+1]) for i in range(0, pop_size, 2)]
    offspring = [mutation(individual) for individual in offspring]

    elite_population = elitism(population)
    population = elite_population + offspring

    fitnesses = [fitness(individual) for individual in population]
    best_fitness = max(fitnesses)
    best_fitnesses.append(best_fitness)

    # Check if solution has been found
    if best_fitness == 0: #checking that there are 0 conflicts found within fitness function
        best_individual = population[fitnesses.index(best_fitness)]
        print("Local Optimal Solution found on iteration: ", iteration)
        print("Solution runtime: %s seconds " % (time.time() - start_time))
        x, y = tracemalloc.get_traced_memory()
        print("Memory Block Usage: ", y)
        print("Best Fitness: ", best_fitness)
        print("Maximum Subgraph Size: ", len(graph))
        print(best_individual)
        break
    elif iteration == generations-1:
        best_individual = population[fitnesses.index(best_fitness)]
        print("All", iteration, "Iterations Ran")
        print("Solution Runtime: %s seconds " % (time.time() - start_time))
        x, y = tracemalloc.get_traced_memory()
        print("Memory Block Usage: ", y)
        print("Solution Fitness: ", best_fitness) #Removing half the amount of listed nodes would get the Maximum Subgraph Size
        print("\nWarning: Solution Fitness is less than 0 meaning Color Collision has been detected.\n")
        print(best_individual)
        size = len(graph)+(best_fitness/2)
        if(best_fitness%2!=0):
            size -= .5
        print("Best Fitness: ", best_fitness)
        print("Maximum Subgraph Size: ", size)
        break

plt.plot(best_fitnesses)
plt.xlabel('Generation')
plt.ylabel('Best fitness')
plt.show()

nx_graph = nx.Graph()
nx_graph.add_nodes_from(graph.keys())
for node, neighbors in graph.items():
    for neighbor in neighbors:
        nx_graph.add_edge(node, neighbor)

node_colors = [best_individual[node] for node in nx_graph.nodes()]
pos = nx.spring_layout(nx_graph)
nx.draw(nx_graph, pos, node_color=node_colors, with_labels=True)
plt.show()

tracemalloc.stop()